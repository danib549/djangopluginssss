<?xml version='1.0' encoding='UTF-8'?>
<l:dependencies xmlns:l='licenses' groupId='io.jenkins.plugins' artifactId='analysis-model-api' version='13.5.0'><l:dependency name='Analysis Model API Plugin' groupId='io.jenkins.plugins' artifactId='analysis-model-api' version='13.5.0' url='https://github.com/jenkinsci/analysis-model-api-plugin'><l:description>Static Analysis Model and Parsers API used by the Warnings plugin.</l:description><l:license name='MIT license' url=''/></l:dependency><l:dependency name='PMD Java' groupId='net.sourceforge.pmd' artifactId='pmd-java' version='7.14.0' url='https://pmd.github.io/pmd-java/'><l:description>PMD is an extensible multilanguage static code analyzer. It finds common programming flaws like unused variables,
        empty catch blocks, unnecessary object creation, and so forth. It's mainly concerned with Java and
        Apex, but supports 16 other languages. It comes with 400+ built-in rules. It can be
        extended with custom rules. It uses JavaCC and Antlr to parse source files into abstract syntax trees
        (AST) and runs rules against them to find violations. Rules can be written in Java or using a XPath query.

        Currently, PMD supports Java, JavaScript, Salesforce.com Apex and Visualforce,
        Kotlin, Swift, Modelica, PLSQL, Apache Velocity, JSP, WSDL, Maven POM, HTML, XML and XSL.
        Scala is supported, but there are currently no Scala rules available.

        Additionally, it includes CPD, the copy-paste-detector. CPD finds duplicated code in
        Coco, C/C++, C#, Dart, Fortran, Gherkin, Go, Groovy, HTML, Java, JavaScript, JSP, Julia, Kotlin,
        Lua, Matlab, Modelica, Objective-C, Perl, PHP, PLSQL, Python, Ruby, Rust, Salesforce.com Apex and
        Visualforce, Scala, Swift, T-SQL, Typescript, Apache Velocity, WSDL, XML and XSL.</l:description><l:license name='BSD-style' url='http://pmd.sourceforge.net/license.html'/></l:dependency><l:dependency name='Code Generation Library' groupId='cglib' artifactId='cglib' version='2.2.2' url='http://cglib.sourceforge.net/'><l:description>Code generation library</l:description><l:license name='ASF 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Nice XML messages' groupId='com.github.oowekyala.ooxml' artifactId='nice-xml-messages' version='3.1' url='https://github.com/oowekyala/nice-xml-messages'><l:description>Associates XML DOM nodes to their position in source, to enrich error messages.
        This builds on top of the standard org.w3c.dom API. Should probably not be used
        in performance critical code, but can hopefully cleanup reporting logic in places
        where user-friendly messages are important.</l:description><l:license name='MIT License' url='https://github.com/oowekyala/nice-xml-messages/tree/master/LICENSE'/></l:dependency><l:dependency name='XML Commons External Components XML APIs' groupId='xml-apis' artifactId='xml-apis' version='1.4.01' url='http://xml.apache.org/commons/components/external/'><l:description>xml-commons provides an Apache-hosted set of DOM, SAX, and 
    JAXP interfaces for use in other xml-based projects. Our hope is that we 
    can standardize on both a common version and packaging scheme for these 
    critical XML standards interfaces to make the lives of both our developers 
    and users easier. The External Components portion of xml-commons contains 
    interfaces that are defined by external standards organizations. For DOM, 
    that's the W3C; for SAX it's David Megginson and sax.sourceforge.net; for 
    JAXP it's Sun.</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/><l:license name='The SAX License' url='http://www.saxproject.org/copying.html'/><l:license name='The W3C License' url='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/java-binding.zip'/></l:dependency><l:dependency name='XML Resolver' groupId='org.xmlresolver' artifactId='xmlresolver' version='5.3.3' url='https://github.com/xmlresolver/xmlresolver'><l:description>An XML entity/uri resolver</l:description><l:license name='Apache License version 2.0' url='https://www.apache.org/licenses/LICENSE-2.0'/></l:dependency><l:dependency name='PCollections' groupId='org.pcollections' artifactId='pcollections' version='4.0.2' url='https://github.com/hrldcpr/pcollections'><l:description>A Persistent Java Collections Library</l:description><l:license name='The MIT License' url='https://opensource.org/licenses/mit-license.php'/></l:dependency><l:dependency name='Apache Commons BCEL' groupId='org.apache.bcel' artifactId='bcel' version='6.10.0' url='https://commons.apache.org/proper/commons-bcel'><l:description>Apache Commons Bytecode Engineering Library</l:description><l:license name='Apache-2.0' url='https://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Static Analysis Model and Parsers' groupId='edu.hm.hafner' artifactId='analysis-model' version='13.5.0' url='https://cs.hm.edu/~hafner'><l:description>This library provides a Java object model to read, aggregate, filter, and query static analysis reports.
    It is used by Jenkins' warnings next generation plug-in to visualize the warnings of individual builds.
    Additionally, this library is used by a GitHub action to autograde student software projects based on a given set of
    metrics (unit tests, code and mutation coverage, static analysis warnings).</l:description><l:license name='MIT license' url=''/><l:license name='Creative Commons Attribution 4.0 International License' url=''/></l:dependency><l:dependency name='violations-lib' groupId='se.bjurr.violations' artifactId='violations-lib' version='1.158.1' url='https://github.com/tomasbjerre/violations-lib'><l:description>Parsing report files like static code analysis</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Apache Commons Digester' groupId='org.apache.commons' artifactId='commons-digester3' version='3.2' url='http://commons.apache.org/digester/'><l:description>The Apache Commons Digester package lets you configure an XML to Java
    object mapping module which triggers certain actions called rules whenever
    a particular pattern of nested XML elements is recognized.</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='XML Resolver' groupId='org.xmlresolver' artifactId='xmlresolver' version='5.3.3' url='https://github.com/xmlresolver/xmlresolver'><l:description>An XML entity/uri resolver</l:description><l:license name='Apache License version 2.0' url='https://www.apache.org/licenses/LICENSE-2.0'/></l:dependency><l:dependency name='Xerces2-j' groupId='xerces' artifactId='xercesImpl' version='2.12.2' url='https://xerces.apache.org/xerces2-j/'><l:description>Xerces2 provides high performance, fully compliant XML parsers in the Apache Xerces family. This new version of Xerces continues to build upon the Xerces Native Interface (XNI), a complete framework for building parser components and configurations that is extremely modular and easy to program.

      The Apache Xerces2 parser is the reference implementation of XNI but other parser components, configurations, and parsers can be written using the Xerces Native Interface. For complete design and implementation documents, refer to the XNI Manual.

      Xerces2 provides fully conforming XML Schema 1.0 and 1.1 processors. An experimental implementation of the "XML Schema Definition Language (XSD): Component Designators (SCD) Candidate Recommendation (January 2010)" is also provided for evaluation. For more information, refer to the XML Schema page.

      Xerces2 also provides a complete implementation of the Document Object Model Level 3 Core and Load/Save W3C Recommendations and provides a complete implementation of the XML Inclusions (XInclude) W3C Recommendation. It also provides support for OASIS XML Catalogs v1.1.

      Xerces2 is able to parse documents written according to the XML 1.1 Recommendation, except that it does not yet provide an option to enable normalization checking as described in section 2.13 of this specification. It also handles namespaces according to the XML Namespaces 1.1 Recommendation, and will correctly serialize XML 1.1 documents if the DOM level 3 load/save APIs are in use.</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Saxon-HE' groupId='net.sf.saxon' artifactId='Saxon-HE' version='12.7' url='http://www.saxonica.com/'><l:description>The XSLT and XQuery Processor</l:description><l:license name='Mozilla Public License Version 2.0' url='http://www.mozilla.org/MPL/2.0/'/></l:dependency><l:dependency name='Checker Qual' groupId='org.checkerframework' artifactId='checker-qual' version='3.49.3' url='https://checkerframework.org/'><l:description>checker-qual contains annotations (type qualifiers) that a programmerwrites to specify Java code for type-checking by the Checker Framework.</l:description><l:license name='The MIT License' url='http://opensource.org/licenses/MIT'/></l:dependency><l:dependency name='Apache Log4j API' groupId='org.apache.logging.log4j' artifactId='log4j-api' version='2.24.3' url='https://logging.apache.org/log4j/2.x/log4j/log4j-api/'><l:description>The logging API of the Log4j project.
    Library and application code can log through this API.
    It contains a simple built-in implementation (`SimpleLogger`) for trivial use cases.
    Production applications are recommended to use Log4j API in combination with a fully-fledged implementation, such as Log4j Core.</l:description><l:license name='Apache-2.0' url='https://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='SpotBugs' groupId='com.github.spotbugs' artifactId='spotbugs' version='4.9.3' url='https://spotbugs.github.io/'><l:description>SpotBugs: Because it's easy!</l:description><l:license name='GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1' url='https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'/></l:dependency><l:dependency name='PMD Core' groupId='net.sourceforge.pmd' artifactId='pmd-core' version='7.14.0' url='https://pmd.github.io/pmd-core/'><l:description>PMD is an extensible multilanguage static code analyzer. It finds common programming flaws like unused variables,
        empty catch blocks, unnecessary object creation, and so forth. It's mainly concerned with Java and
        Apex, but supports 16 other languages. It comes with 400+ built-in rules. It can be
        extended with custom rules. It uses JavaCC and Antlr to parse source files into abstract syntax trees
        (AST) and runs rules against them to find violations. Rules can be written in Java or using a XPath query.

        Currently, PMD supports Java, JavaScript, Salesforce.com Apex and Visualforce,
        Kotlin, Swift, Modelica, PLSQL, Apache Velocity, JSP, WSDL, Maven POM, HTML, XML and XSL.
        Scala is supported, but there are currently no Scala rules available.

        Additionally, it includes CPD, the copy-paste-detector. CPD finds duplicated code in
        Coco, C/C++, C#, Dart, Fortran, Gherkin, Go, Groovy, HTML, Java, JavaScript, JSP, Julia, Kotlin,
        Lua, Matlab, Modelica, Objective-C, Perl, PHP, PLSQL, Python, Ruby, Rust, Salesforce.com Apex and
        Visualforce, Scala, Swift, T-SQL, Typescript, Apache Velocity, WSDL, XML and XSL.</l:description><l:license name='BSD-style' url='http://pmd.sourceforge.net/license.html'/></l:dependency></l:dependencies>